###########################
##### PROJECT TESTING #####
###########################

"""
Includes 15 Unit tests - used to test each of the programs functions 
using a known input before comparing the expected output to the actual output
If expected ouput = actual ouput the function is working correctly
"""

from project_functions import *
from openpyxl import load_workbook
import os

folder_directory = os.path.dirname(__file__)
os.chdir(folder_directory)

workbook_name = 'project_data.xlsx'
workbook = load_workbook(workbook_name)
original_sheet = workbook['test_data'] # USING TEST DATA SHEET FOR TESTING
headings = get_headings(original_sheet) # list of headings

# Note:
# The expected value is the actual value (i.e., correct value) and the outputted value is the
# value generated by the functions or code


### TESTING FUNCTIONS ###

# Test 1 - get_units function
headings = ['Date', 'Time', 'CO 1 hour average [ppb]', 'Humidity 1 hour average [%]', 'NEPH 1 hour average [bsp]', 'NO 1 hour average [ppb]', 'NO2 1 hour average [ppb]', 'NOX 1 hour average [ppb]', 'OZONE 1 hour average [ppb]', 'PM10 1 hour average [µg/m≥]', 'SD1 1 hour average [∞]', 'SO2 1 hour average [ppb]', 'Solar 1 hour average [W/m2]', 'Temperature 1 hour average [∞C]', 'Wind Direction 1 hour average [∞]', 'Wind Speed 1 hour average [m/s]']
expected_units = ['', '', 'ppb', '%', 'bsp', 'ppb', 'ppb', 'ppb', 'ppb', 'µg/m≥', '∞', 'ppb', 'W/m2', '∞C', '∞', 'm/s']

def test1_units(headings, expected_units):
    outputted_units = get_units(headings)
    assert expected_units == outputted_units, 'Test 1 FAILED' # returns message if condition is Flase (i.e., expected_output is not equal to actual_output)
    print("Test 1 PASSED - get_units function works")


# Test 2 - create_column_options_string function
expected_options = """
Enter corresponding number for your choice of subtance/weather condition:
1) CO 1 hour average [ppb]
2) Humidity 1 hour average [%]
3) NEPH 1 hour average [bsp]
4) NO 1 hour average [ppb]
5) NO2 1 hour average [ppb]
6) NOX 1 hour average [ppb]
7) OZONE 1 hour average [ppb]
8) PM10 1 hour average [µg/m≥]
9) SD1 1 hour average [∞]
10) SO2 1 hour average [ppb]
11) Solar 1 hour average [W/m2]
12) Temperature 1 hour average [∞C]
13) Wind Direction 1 hour average [∞]
14) Wind Speed 1 hour average [m/s]
"""

def test2_column_options(headings):
    outputted_options = create_column_options_string(headings)
    assert expected_options == outputted_options, 'Test 2 FAILED' 
    print("Test 2 PASSED - create_column_options_string function works")


# Test 3 - sort_column function
expected_sorted_col = [1, 2, 4, 7]

def test3_sort_col(original_sheet):
    outputted_sorted_col = sort_column(3, original_sheet)
    assert expected_sorted_col == outputted_sorted_col, 'Test 3 FAILED'
    print("Test 3 PASSED - create_column_options_string function works")


# Test 4 - get_mean function
expected_mean = 3.5

def test4_mean(original_sheet):
    outputted_mean = get_mean(3, original_sheet, sort_column(3, original_sheet))
    assert expected_mean == outputted_mean, 'Test 4 FAILED'
    print("Test 4 PASSED - get_mean function works")


# Test 5 - get_min_max function
expected_min = 1
expected_max = 7
expected_data_range = 6

def test5_min_max(original_sheet):
    outputted_min, outputted_max, outputted_data_range = get_min_max(3, original_sheet, sort_column(3, original_sheet))
    assert expected_min == outputted_min, 'Test 5a FAILED'
    print('Test 5a PASSED - calculating minimum in get_min_max function works')
    assert expected_max == outputted_max, 'Test 5b FAILED'
    print('Test 5b PASSED - calculating maximum in get_min_max function works')
    assert expected_data_range == outputted_data_range, 'Test 5c FAILED'
    print('Test 5c PASSED - calculating range in get_min_max function works')


# Test 6 - get_modes function
expected_modes = [1]

def test6_modes(original_sheet):
    outputted_modes = get_modes(4, original_sheet, sort_column(4, original_sheet))
    assert expected_modes == outputted_modes, 'Test 6 FAILED'
    print('Test 6 PASSED - get_modes function works')


# Test 7 - get_middle_of_list function
expected_middle = 3.0

def test7_middle_of_list(original_sheet):
    data_list = sort_column(3, original_sheet)
    outputted_middle = get_middle_of_list(data_list)
    assert expected_middle == outputted_middle, 'Test 7 FAILED'
    print('Test 7 PASSED - get_middle_of_list function works')


# Test 8 - get_quartiles function
expected_q1 = 1.5
expected_median = 3
expected_q3 = 5.5
expected_IQR = 4

def test8_quartiles(original_sheet):
    outputted_q1, outputted_median, outputted_q3, outputted_IQR = get_quartiles(3, original_sheet, sort_column(3, original_sheet))
    assert expected_q1 == outputted_q1, 'Test 8a FAILED'
    print('Test 8a PASSED - calculating q1 in get_quartiles function works')
    assert expected_median == outputted_median, 'Test 8b FAILED'
    print('Test 8b PASSED - calculating median in get_quartiles function works')
    assert expected_q3 == outputted_q3, 'Test 8c FAILED'
    print('Test 8c PASSED - calculating q3 in get_quartiles works')
    assert expected_IQR == outputted_IQR, 'Test 8d FAILED'
    print('Test 8d PASSED - calculating IQR in get_quartiles works')


# Test 9 - check_for_outliers function
expected_outliers = []

def test9_outliers(original_sheet):
    outputted_outliers = check_for_outliers(3, original_sheet, sort_column(3, original_sheet))
    assert expected_outliers == outputted_outliers, 'Test 9 FAILED'
    print('Test 9 PASSED - check_for_outliers function works')


# Test 10 - get_outlier_string
expected_outlier_string = """CO 1 hour average [ppb] has no outliers

Humidity 1 hour average [%] has no outliers

NEPH 1 hour average [bsp] has no outliers

"""

def test10_outlier_string(headings, original_sheet):
    outputted_outlier_string = get_outlier_string(original_sheet, headings)
    assert expected_outlier_string == outputted_outlier_string, 'Test 10 FAILED'
    print('Test 10 PASSED - get_outlier_string works')


# Test 11 - get_headings function
expected_headings = ['Date', 'Time', 'CO2', 'NEPH', 'NO2']

def test11_headings(original_sheet):
    outputted_headings = get_headings(original_sheet)
    assert expected_headings == outputted_headings, 'Test 11 FAILED'
    print('Test 11 PASSED - get_headings function works')


# Test 12 - get_summary_stats function
expected_summary_stats = """
    Summary statistics for CO2:
        * Mean = 3.5 ppb
        * Minimum = 1 ppb
        * Maximum = 7 ppb
        * Range = 6 ppb
        * Q1 = 1.5 ppb
        * Median (Q2) = 3.0 ppb
        * Q3 = 5.5 ppb
        * IQR = 4.0 ppb
    """

def test12_summary_stats(original_sheet):
    outputted_summary_stats = get_summary_stats(3, original_sheet, 'CO2', sort_column(3, original_sheet), 'ppb')
    assert expected_summary_stats == outputted_summary_stats, 'Test 12 FAILED'
    print('Test 12 PASSED - get_summary_stats function works')


# Test 13 - get_variance_and_deviation function
expected_var = 5.25 # To 2 d.p.
expected_dev = 2.29 # To 2 d.p.

def test13_var_dev(original_sheet):
    outputted_var, outputted_deviation = get_variance_and_deviation(3, original_sheet, sort_column(3, original_sheet))
    assert expected_var == round(outputted_var, 2), 'Test 13a FAILED'
    print('Test 13a PASSED - calculating variance in get_variance_and_deviation function works')
    assert expected_dev == round(outputted_deviation, 2), 'Test 13b FAILED'
    print('Test 13b PASSED - calculating standard deviation in get_variance_and_deviation function works')


# Test 14 - calc_z_score function
expected_z_score = -1.09

def test14_z_score(original_sheet):
    outputted_z_score = calc_z_score(1, 3, original_sheet, sort_column(3, original_sheet))
    assert expected_z_score == outputted_z_score, 'Test 14 FAILED'
    print('Test 14 PASSED - calc_z_score function works')


# Test 15 - determine_values_outside_range function
expected_values_string = """CO 1 hour average ppb has 2 values out of acceptable range which is 50.0% of the total values.
Values which are outside acceptable range include: 1, 7, """

def test15_values_outside_range(original_sheet, headings):
    outputted_values_string = determine_values_outside_range(sort_column(3, original_sheet), 6, 2, headings, 3, 5)
    assert expected_values_string == outputted_values_string, 'Test 15 FAILED'
    print('Test 15 PASSED - determine_values_outside_range function works')

# Calling Tests
test1_units(headings, expected_units)
test2_column_options(headings)
test3_sort_col(original_sheet)
test4_mean(original_sheet)
test5_min_max(original_sheet)
test6_modes(original_sheet)
test7_middle_of_list(original_sheet)
test8_quartiles(original_sheet)
test9_outliers(original_sheet)
test10_outlier_string(headings, original_sheet)
test11_headings(original_sheet)
test12_summary_stats(original_sheet)
test13_var_dev(original_sheet)
test14_z_score(original_sheet)
test15_values_outside_range(original_sheet, headings)